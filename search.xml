<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Bitmap的在不同的Drawable下的内存占用及分析</title>
    <url>/2020/09/25/Bitmap%E7%9A%84%E5%9C%A8%E4%B8%8D%E5%90%8C%E7%9A%84Drawable%E4%B8%8B%E7%9A%84%E5%86%85%E5%AD%98%E5%8D%A0%E7%94%A8%E5%8F%8A%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<blockquote>
<p>微信公众号：Lucidastar<br>如有问题或建议，请公众号留言<br>最近更新：<code>2020-09-25</code></p>
</blockquote>
<p>平常我们使用图片的地方很多，比如图片的压缩、加载、裁剪等等。今天我们主要从Bitmap的基础进行了解。</p>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><h3 id="1、一张图片放到手机中内存是如何计算的？"><a href="#1、一张图片放到手机中内存是如何计算的？" class="headerlink" title="1、一张图片放到手机中内存是如何计算的？"></a>1、一张图片放到手机中内存是如何计算的？</h3><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;获取占用内存大小
    public final int getByteCount(Bitmap bitmap) &#123;
        &#x2F;&#x2F; int result permits bitmaps up to 46,340 x 46,340
        KLog.d(&quot;getByteCount:&quot;+bitmap.getByteCount());
        return bitmap.getRowBytes() * bitmap.getHeight();&#x2F;&#x2F;图片的水平的字节数*图片的高度就是占用的内存
    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这是通过api进行获取的，具体的就不解释了。</p>
<blockquote>
<p><strong>图片占用的内存=图片的宽度×图片的长度×单位像素占用的字节数</strong></p>
</blockquote>
<a id="more"></a>
<ul>
<li><h4 id="Android中默认单位像素占用的字节数是多少呢？"><a href="#Android中默认单位像素占用的字节数是多少呢？" class="headerlink" title="Android中默认单位像素占用的字节数是多少呢？"></a>Android中默认单位像素占用的字节数是多少呢？</h4><pre class="line-numbers language-none"><code class="language-none">Bitmap bitmap &#x3D; BitmapFactory.decodeResource(getResources(), R.drawable.forself);
KLog.d(&quot;bitmapConfig:&quot;+bitmap3.getConfig());<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
默认打印：<code>bitmapConfig:ARGB_8888</code>也就是默认设置的</li>
</ul>
<table>
<thead>
<tr>
<th>Bitmap.Config</th>
<th>值</th>
<th>描述</th>
<th>占用内存(字节)</th>
</tr>
</thead>
<tbody><tr>
<td>Bitmap.Config</td>
<td>ARGB_8888</td>
<td>表示32位的ARGB位图</td>
<td>4</td>
</tr>
<tr>
<td>Bitmap.Config</td>
<td>ARGB_4444</td>
<td>表示16位的ARGB位图</td>
<td>2</td>
</tr>
<tr>
<td>Bitmap.Config</td>
<td>RGB_565</td>
<td>表示16位的RGB位图</td>
<td>2</td>
</tr>
<tr>
<td>Bitmap.Config</td>
<td>ALPHA_8</td>
<td>表示8位的Alpha位图</td>
<td>1</td>
</tr>
</tbody></table>
<ul>
<li><h4 id="density，densityDpi，targetDensity的区别及关系"><a href="#density，densityDpi，targetDensity的区别及关系" class="headerlink" title="density，densityDpi，targetDensity的区别及关系"></a>density，densityDpi，targetDensity的区别及关系</h4><table>
<thead>
<tr>
<th>density</th>
<th align="center">densityDpi</th>
<th>res</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td align="center">160</td>
<td>mdpi</td>
</tr>
<tr>
<td>1.5</td>
<td align="center">240</td>
<td>hdpi</td>
</tr>
<tr>
<td>2</td>
<td align="center">320</td>
<td>xhdpi</td>
</tr>
<tr>
<td>3</td>
<td align="center">480</td>
<td>xxhdpi</td>
</tr>
<tr>
<td>4</td>
<td align="center">640</td>
<td>xxxhdpi</td>
</tr>
</tbody></table>
</li>
</ul>
<blockquote>
<ul>
<li>px = density * dp;</li>
<li>density = dpi / 160;</li>
<li>px = dp * (dpi / 160);</li>
</ul>
</blockquote>
<ul>
<li><h4 id="同样的一张图片放到不同的drawable文件夹下占用内存是多少呢？"><a href="#同样的一张图片放到不同的drawable文件夹下占用内存是多少呢？" class="headerlink" title="同样的一张图片放到不同的drawable文件夹下占用内存是多少呢？"></a>同样的一张图片放到不同的drawable文件夹下占用内存是多少呢？</h4><strong>使用的是小米node，分辨率是：1440x2560;图片大小：559x372</strong><pre class="line-numbers language-none"><code class="language-none">public final int getByteCount(Bitmap bitmap) &#123;
        &#x2F;&#x2F; int result permits bitmaps up to 46,340 x 46,340
        KLog.d(&quot;getByteCount:&quot;+bitmap.getByteCount());
        return bitmap.getRowBytes() * bitmap.getHeight();&#x2F;&#x2F;图片的水平的字节数*图片的高度就是占用的内存
    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>drawable-mdpi === 图片占用内存的大小:13308672  width:2236;height:1488(2236x1488x4=13308672)</li>
<li>drawable-hdpi === 图片占用内存的大小:5916288   width:1491;height:992(1471x991x4=5916288)</li>
<li>drawable-xhdpi === 图片占用内存的大小:3327168   width:1118;height:744(……)</li>
<li>drawable-xxhdpi === 图片占用内存的大小:1478080  width:745;height:496(……)</li>
<li>drawable-xxxhdpi === 图片占用内存的大小:831792  width:559;height:372(……)</li>
</ul>
<p>这是什么原因呢？图片是同样的图片，只是放到了不同的drawable文件夹下，但是占用的内存是不一样的，但是获取到的bitmap的宽高也是不一样的，占用的内存大，获取的图片宽高就大，这是什么原因呢？我们分析一下。</p>
<ul>
<li><p>也就是占用内存的大小=图片的宽x图片的高x一个像素占用了4个字节(ARGB_8888)</p>
</li>
<li><p>如果把这张放置在xxxhdpi的话，应该不会对图像进行放缩，也就是原始大小，所以我们在前面得到drawable-xxxh   dpi文件夹下，图片大小为559 372是完全可以理解的，就是图片本身的大小。</p>
<ul>
<li>相同的，如果一张图片很大，如果直接加载到内存中，那就会导致内存溢出，默认最大的内存是16M<pre class="line-numbers language-none"><code class="language-none">private static final int DECODE_BUFFER_SIZE &#x3D; 16 * 1024;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

</li>
</ul>
</li>
</ul>
<blockquote>
<p>当把图片放置在xxhdpi里面的时候，在xxxhdpi的设备上，图片长 = 559 (3/4) = 745.333，图片宽 = 372 (3/4) = 496，这与上面的测试结果是完全一致的。</p>
</blockquote>
<blockquote>
<p>当把图片放置在xhdpi里面的时候，在xxxhdpi的设备上，图片长 = 559 (2/4) = 1118，图片宽 = 372 (2/4) = 744，这与上面的测试结果是完全一致的。</p>
</blockquote>
<ul>
<li><strong>结论</strong><blockquote>
<ol>
<li>当图片放置在不同drawable文件夹中，且只有这一张图片时，运行设备会根据自身的屏幕密度，对图片进行放缩，放缩比例符合前面图上的规则</li>
</ol>
</blockquote>
</li>
</ul>
<blockquote>
<ol start="2">
<li>图片文件的大小与在内存中占用的大小没关系，内存中实际占用大小与图片分辨率、像素显示参数有关</li>
</ol>
</blockquote>
<h3 id="2、我们如何正确的把一张大图加载到界面的控件上呢-或者说固定大小的ImageView加载一张大图，我们该如何解决呢-？"><a href="#2、我们如何正确的把一张大图加载到界面的控件上呢-或者说固定大小的ImageView加载一张大图，我们该如何解决呢-？" class="headerlink" title="2、我们如何正确的把一张大图加载到界面的控件上呢(或者说固定大小的ImageView加载一张大图，我们该如何解决呢)？"></a>2、我们如何正确的把一张大图加载到界面的控件上呢(或者说固定大小的ImageView加载一张大图，我们该如何解决呢)？</h3><blockquote>
<p>比如一张500x500的图，要放到60x60的ImageView的控件上，就没有必要把整张原图都加载到内存中。</p>
</blockquote>
<p>引自android中文文档<code>http://hukai.me/android-training-course-in-chinese/graphics/displaying-bitmaps/load-bitmap.html</code></p>
<ul>
<li>为了告诉解码器去加载一个缩小版本的图片到内存中，需要在BitmapFactory.Options 中设置 inSampleSize 的值。例如, 一个分辨率为2048x1536的图片，如果设置 inSampleSize 为4，那么会产出一个大约512x384大小的Bitmap。加载这张缩小的图片仅仅使用大概0.75MB的内存，如果是加载完整尺寸的图片，那么大概需要花费12MB（前提都是Bitmap的配置是 ARGB_8888）。下面有一段根据目标图片大小来计算Sample图片大小的代码示例：<pre class="line-numbers language-none"><code class="language-none">public static int calculateInSampleSize(
            BitmapFactory.Options options, int reqWidth, int reqHeight) &#123;
    &#x2F;&#x2F; Raw height and width of image
    final int height &#x3D; options.outHeight;
    final int width &#x3D; options.outWidth;
    int inSampleSize &#x3D; 1;
    if (height &gt; reqHeight || width &gt; reqWidth) &#123;
    
        final int halfHeight &#x3D; height &#x2F; 2;
        final int halfWidth &#x3D; width &#x2F; 2;

        &#x2F;&#x2F; Calculate the largest inSampleSize value that is a power of 2 and keeps both
        &#x2F;&#x2F; height and width larger than the requested height and width.
        while ((halfHeight &#x2F; inSampleSize) &gt; reqHeight
                &amp;&amp; (halfWidth &#x2F; inSampleSize) &gt; reqWidth) &#123;
            inSampleSize *&#x3D; 2;
        &#125;
    &#125;

    return inSampleSize;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>为了使用该方法，首先需要设置 inJustDecodeBounds 为 true, 把options的值传递过来，然后设置 inSampleSize 的值并设置 inJustDecodeBounds 为 false，之后重新调用相关的解码方法。</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">public static Bitmap decodeSampledBitmapFromResource(Resources res, int resId,
        int reqWidth, int reqHeight) &#123;

    &#x2F;&#x2F; First decode with inJustDecodeBounds&#x3D;true to check dimensions
    final BitmapFactory.Options options &#x3D; new BitmapFactory.Options();
    options.inJustDecodeBounds &#x3D; true;
    BitmapFactory.decodeResource(res, resId, options);

    &#x2F;&#x2F; Calculate inSampleSize
    options.inSampleSize &#x3D; calculateInSampleSize(options, reqWidth, reqHeight);

    &#x2F;&#x2F; Decode bitmap with inSampleSize set
    options.inJustDecodeBounds &#x3D; false;
    return BitmapFactory.decodeResource(res, resId, options);
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>使用上面这个方法可以简单地加载一张任意大小的图片。如下面的代码样例显示了一个接近 60x60像素的缩略图：<pre class="line-numbers language-none"><code class="language-none">mImageView.setImageBitmap(
    decodeSampledBitmapFromResource(getResources(), R.id.myimage, 100, 100));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

</li>
</ul>
<h4 id="inSampleSize是什么呢？有什么作用呢？"><a href="#inSampleSize是什么呢？有什么作用呢？" class="headerlink" title="inSampleSize是什么呢？有什么作用呢？"></a>inSampleSize是什么呢？有什么作用呢？</h4><ul>
<li>如果设置为大于1的值，则请求解码器对原始图像进行子采样，返回较小的图像以节省内存。样本大小是对应于解码位图中单个像素的任一维度的像素数。例如，inSampleSize==4返回图像，该图像为原始图像宽度/高度的1/4，像素数的1/16。任何值&lt;=1将被视为1。注：解码器使用基于2的幂的最终值，任何其他值都将向下舍入到最接近的2的幂次</li>
</ul>
<blockquote>
<p>这是对inSampleSize的注释翻译</p>
</blockquote>
<p><img src="/images/qrcode_for_gh.jpg" alt="Lucidastar"></p>
]]></content>
      <categories>
        <category>Android基础</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>测试</title>
    <url>/2020/09/23/test/</url>
    <content><![CDATA[<h2 id="这是测试"><a href="#这是测试" class="headerlink" title="这是测试"></a>这是测试</h2><pre class="line-numbers language-none"><code class="language-none">int val ;
TreeNode left;
TreeNode right;
public TreeNode(int val) &#123;
    this.val &#x3D; val;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p><strong>这时内容</strong><br>添加的内容<br>~</p>
</blockquote>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo+hexo-theme-next+github博客的搭建</title>
    <url>/2020/09/23/hexo+hexo-theme-next+github%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<p>每天查看博客，学习知识，今天我们也来搭建自己的博客。</p>
<p><strong>开始之前，先给大家看张图，无图无真相。</strong></p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_png/iccib9G9IAFPiao0MKKVyNuF3YVbbqgBfxDYQms1FDJERTkyudBMYFwC5zib97XoelfRrL3KiadUQycnoyYZnAAlRZg/0?wx_fmt=png" alt="image"></p>
<blockquote>
<p>这个就是我们的最终目标</p>
</blockquote>
<h3 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h3><ul>
<li>系统  ==windows==</li>
<li>node.js  ==版本v12.18.4==  <a href="https://nodejs.org/zh-cn/download/">下载路径</a></li>
<li>Git <a href="https://git-scm.com/downloads">下载路径</a></li>
</ul>
<blockquote>
<p><span style="color:#A52A2A;font-size:1.3em;">nodejs的安装及git的安装这里就不进行详细介绍了</span></p>
</blockquote>
<h3 id="hexo-是什么？"><a href="#hexo-是什么？" class="headerlink" title="hexo 是什么？"></a>hexo 是什么？</h3><blockquote>
<p><strong>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</strong></p>
</blockquote>
<a id="more"></a>
<h3 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h3><p>  上面环境准备就绪，打开dos命令框。</p>
<h4 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h4>  <pre class="line-numbers language-none"><code class="language-none">$ npm install -g hexo-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h4 id="验证hexo是否安装成功"><a href="#验证hexo是否安装成功" class="headerlink" title="验证hexo是否安装成功"></a>验证hexo是否安装成功</h4>  <pre class="line-numbers language-none"><code class="language-none">$ hexo -v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="创建博客"><a href="#创建博客" class="headerlink" title="创建博客"></a>创建博客</h3><h4 id="1、创建一个空的文件夹，执行命令"><a href="#1、创建一个空的文件夹，执行命令" class="headerlink" title="1、创建一个空的文件夹，执行命令"></a>1、创建一个空的文件夹，执行命令</h4>  <pre class="line-numbers language-none"><code class="language-none">$ hexo init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h4 id="2、执行生成命令"><a href="#2、执行生成命令" class="headerlink" title="2、执行生成命令"></a>2、执行生成命令</h4>  <pre class="line-numbers language-none"><code class="language-none">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h4 id="3、开启服务"><a href="#3、开启服务" class="headerlink" title="3、开启服务"></a>3、开启服务</h4>  <pre class="line-numbers language-none"><code class="language-none">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h4 id="4、打开浏览器，输入如下："><a href="#4、打开浏览器，输入如下：" class="headerlink" title="4、打开浏览器，输入如下："></a>4、打开浏览器，输入如下：</h4>  <pre class="line-numbers language-none"><code class="language-none">localhost:4000<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>然后就会出现如下界面，说明博客已经创建成功了。<br><img src="https://mmbiz.qpic.cn/mmbiz_png/iccib9G9IAFPiao0MKKVyNuF3YVbbqgBfxDdbibQPvW6icvobEk12uazbBOcJCM2sSVj6sw7pBgQSqBD50RoOv2YQ5w/0?wx_fmt=png" alt="image"></p>
<h2 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h2><p>我使用的主题是hexo-theme-nexT  <a href="https://github.com/theme-next/hexo-theme-next">主题地址</a></p>
<h3 id="1、下载主题"><a href="#1、下载主题" class="headerlink" title="1、下载主题"></a>1、下载主题</h3><p> 我们通过git来进行克隆下来，首先进入到创建博客的目录，然后执行<br> <pre class="line-numbers language-none"><code class="language-none">$ git clone https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;hexo-theme-next themes&#x2F;next<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></p>
<h3 id="2、配置主题"><a href="#2、配置主题" class="headerlink" title="2、配置主题"></a>2、配置主题</h3><ul>
<li><p>首先我们叫博客的配置文件叫：根配置文件 <strong>=&gt;<code>创建博客的文件夹下</code></strong><br><img src="https://mmbiz.qpic.cn/mmbiz_png/iccib9G9IAFPiao0MKKVyNuF3YVbbqgBfxDnYaTkmSyx1AAhDxKicbND7NGeSuQVWDyH6ptKsicKHwsYzKAicJMMJXEw/0?wx_fmt=png" alt="image"></p>
</li>
<li><p>主题的配置文件叫：主题配置文件 <strong>=&gt;<code>创建博客的文件夹下/theme/next/</code></strong><br><img src="https://mmbiz.qpic.cn/mmbiz_png/iccib9G9IAFPiao0MKKVyNuF3YVbbqgBfxD8KjP0icDtMjz3gnkCurxRMa8OfFdXQbmczzhic9A9ia6wgZzwQslYVQuA/0?wx_fmt=png" alt="image"></p>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><h4 id="1-打开根配置文件，找到如下："><a href="#1-打开根配置文件，找到如下：" class="headerlink" title="1. 打开根配置文件，找到如下："></a>1. 打开根配置文件，找到如下：</h4><blockquote>
<p>#Extensions<br><br>##Plugins: <a href="https://hexo.io/plugins/">https://hexo.io/plugins/</a><br><br>##Themes: <a href="https://hexo.io/themes/">https://hexo.io/themes/</a><br><br>theme: next  <strong>(把这里替换成next)</strong></p>
</blockquote>
</li>
</ul>
<p>然后执行创建博客的<code>第2步</code>、<code>第3步</code> 。接着在浏览器中查看效果，这时候已经改变了。</p>
<pre class="line-numbers language-none"><code class="language-none">$ hexo g
$ hexo s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h4 id="2-主题默认是上下结构，我们改为左右结构"><a href="#2-主题默认是上下结构，我们改为左右结构" class="headerlink" title="2. 主题默认是上下结构，我们改为左右结构"></a>2. 主题默认是上下结构，我们改为左右结构</h4><ul>
<li>打开主题配置文件找到如下<blockquote>
<p>#Schemes<br><br>#scheme: Muse<br><br>#scheme: Mist<br><br>#scheme: Pisces<br><br>scheme: Gemini <strong>(把主题设置成Gemini)</strong></p>
</blockquote>
</li>
</ul>
<h4 id="3-修改头像部分如下："><a href="#3-修改头像部分如下：" class="headerlink" title="3. 修改头像部分如下："></a>3. 修改头像部分如下：</h4><p><img src="https://mmbiz.qpic.cn/mmbiz_png/iccib9G9IAFPiao0MKKVyNuF3YVbbqgBfxDaSTNJ9Mq3icvxlKnOX55NfymWKKEkMCuZjKSfXrwMxrLiadI7pCIbqfw/0?wx_fmt=png" alt="image"></p>
<ul>
<li>修改头像<br>打开主题配置文件，找到如下<blockquote>
<p>avatar:<br><br>#Replace the default image and set the url here.<br><br>url: <code>头像地址(可以是本地，也可以网上图片，我使用的是)</code><a href="https://mmbiz.qpic.cn/mmbiz_png/iccib9G9IAFPiaRf9CcSkctpUlmbLRHR72wSdllaqf21JwIueIiadYM1mH0RGme31Ral4NhacRUSakMVdp9nl8iciaVw/0?wx_fmt=png">https://mmbiz.qpic.cn/mmbiz_png/iccib9G9IAFPiaRf9CcSkctpUlmbLRHR72wSdllaqf21JwIueIiadYM1mH0RGme31Ral4NhacRUSakMVdp9nl8iciaVw/0?wx_fmt=png</a><br><br>#If true, the avatar will be dispalyed in circle.<br><br>rounded: true <code>(是否设置成圆形)</code><br><br>#If true, the avatar will be rotated with the cursor.<br><br>rotated: false <code>(是否进行旋转)</code><br></p>
</blockquote>
</li>
</ul>
<hr>
<ul>
<li>修改名称</li>
</ul>
<p>打开根配置文件，找到如下:  <code>这里我就不解释了</code></p>
<blockquote>
<p>#Site<br><br>title: hyli_teacher<br><br>subtitle: ‘’<br><br>description: ‘不要纠结于现在，努力奔跑就好了’<br><br>keywords:<br><br>author: hyli_teacher<br><br>language: zh-CN<br><br>timezone: ‘’<br></p>
</blockquote>
<hr>
<h4 id="4-打开这些标签"><a href="#4-打开这些标签" class="headerlink" title="4. 打开这些标签"></a>4. 打开这些标签</h4><p><img src="https://mmbiz.qpic.cn/mmbiz_png/iccib9G9IAFPiao0MKKVyNuF3YVbbqgBfxDc3u9cr33CgaLVgWerVHabG60FZiaqtvASnb1hxpwXH0xNY1qiagv0ic7Q/0?wx_fmt=png" alt="image"></p>
<p>打开主题配置文件，找到：</p>
<blockquote>
<p>menu:<br><br>  home: / || fa fa-home<code>(首页)</code><br><br>  about: /about/ || fa fa-user<code>(关于)</code><br><br>  tags: /tags/ || fa fa-tags<code>(标签)</code><br><br>  categories: /categories/ || fa fa-th<code>(分类)</code><br><br>  archives: /archives/ || fa fa-archive<code>(归档)</code><br><br>  #schedule: /schedule/ || fa fa-calendar<br><br>  #sitemap: /sitemap.xml || fa fa-sitemap<br><br>  #commonweal: /404/ || fa fa-heartbeat<br></p>
</blockquote>
<hr>
<ul>
<li><strong>搜索的添加</strong><br>在命令框中执行<pre class="line-numbers language-none"><code class="language-none">$ npm install hexo-generator-searchdb --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
打开根配置文件，在末尾添加<pre class="line-numbers language-none"><code class="language-none">search:
  path: search.xml
  field: post
  content: true
  format: html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
打开主题根配置文件<pre class="line-numbers language-none"><code class="language-none"># Local Search
# Dependencies: https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;hexo-generator-searchdb
local_search:
  enable: true  这里设置成true就可以了
  # If auto, trigger search by changing input.
  # If manual, trigger search by pressing enter key or search button.
  trigger: auto
  # Show top n results per article, show all results by setting to -1
  top_n_per_article: 1
  # Unescape html strings to the readable one.
  unescape: false
  # Preload the search data when the page loads.
  preload: false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<hr>
<h4 id="5-添加关于、标签、分类的点击"><a href="#5-添加关于、标签、分类的点击" class="headerlink" title="5. 添加关于、标签、分类的点击"></a>5. 添加关于、标签、分类的点击</h4><ul>
<li><strong>添加关于</strong><pre class="line-numbers language-none"><code class="language-none">$ hexo new page about<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>这时候就会在根目录/source/about/index.md生成这样的文件然后打开这个文件index.md<br>如下：</p>
</blockquote>
<pre class="line-numbers language-none"><code class="language-none">title: 关于我
date: 2020-09-22 17:49:35
type: about<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<hr>
<ul>
<li><strong>添加标签</strong><pre class="line-numbers language-none"><code class="language-none">$ hexo new page tags<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>这时候就会在根目录/source/tags/index.md生成这样的文件然后打开这个文件index.md<br>如下：</p>
</blockquote>
<pre class="line-numbers language-none"><code class="language-none">title: 标签
date: 2020-09-22 17:49:35
type: tags<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<hr>
<ul>
<li><strong>添加分类</strong><pre class="line-numbers language-none"><code class="language-none">$ hexo new page categories<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>这时候就会在根目录/source/tags/index.md生成这样的文件然后打开这个文件index.md<br>如下：</p>
</blockquote>
<pre class="line-numbers language-none"><code class="language-none">title: 分类
date: 2020-09-22 17:49:35
type: categories<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<h4 id="6-创建一个测试，分类是：hexo，标签是：技术和了解"><a href="#6-创建一个测试，分类是：hexo，标签是：技术和了解" class="headerlink" title="6. 创建一个测试，分类是：hexo，标签是：技术和了解"></a>6. 创建一个测试，分类是：hexo，标签是：技术和了解</h4><pre class="line-numbers language-none"><code class="language-none">$ hexo new post test<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>然后如下：</p>
<pre class="line-numbers language-none"><code class="language-none">title: other
date: 2020-09-23 17:34:21
tags: 
  - 技术
  - 了解
categories: hexo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>接着在下面写正文就可以了。</p>
<h3 id="发布到github上"><a href="#发布到github上" class="headerlink" title="发布到github上"></a>发布到github上</h3><h4 id="1、在github上创建一个仓库，仓库名字必须是：你的注册名字-github-io"><a href="#1、在github上创建一个仓库，仓库名字必须是：你的注册名字-github-io" class="headerlink" title="1、在github上创建一个仓库，仓库名字必须是：你的注册名字+github+io"></a>1、在github上创建一个仓库，仓库名字必须是：<code>你的注册名字+github+io</code></h4><p>像我的这样：lucidastar.github.io</p>
<h4 id="2、安装hexo-deployer-git-https-github-com-hexojs-hexo-deployer-git"><a href="#2、安装hexo-deployer-git-https-github-com-hexojs-hexo-deployer-git" class="headerlink" title="2、安装hexo-deployer-git https://github.com/hexojs/hexo-deployer-git"></a>2、安装hexo-deployer-git <code>https://github.com/hexojs/hexo-deployer-git</code></h4><ul>
<li><a href="https://github.com/hexojs/hexo-deployer-git">地址</a></li>
<li>执行命令<pre class="line-numbers language-none"><code class="language-none">$ npm install hexo-deployer-git --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>修改根配置文件,如下<pre class="line-numbers language-none"><code class="language-none">deploy:
  type: &#39;git&#39;
  repo: &#39;git@github.com:Lucidastar&#x2F;lucidastar.github.io.git&#39;(仓库地址)
  branch: &#39;master&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>执行上传操作<pre class="line-numbers language-none"><code class="language-none">$ hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>打开地址</li>
</ul>
<p>https://你的仓库名字<br>这是我的：<code>https://lucidastar.github.io</code></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>技术</tag>
        <tag>了解</tag>
      </tags>
  </entry>
</search>
